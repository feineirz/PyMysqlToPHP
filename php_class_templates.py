#! /usr/bin/env python3

from helper_functions import *

ribbon_length = 120

# PHP Credits
php_credits = ''
php_credits += '//'+ribbonize(ribbon_length, '=')+'//\n'
_content = 'This file automatically generated by MySQL2PHP Class Generator'
php_credits += '//'+ribbonize(ribbon_length, '-', _content)+'//\n'
_content = 'Version 1.0.0.1'
php_credits += '//'+ribbonize(ribbon_length, '-', _content)+'//\n'
_content = 'Last Update 2022-03'
php_credits += '//'+ribbonize(ribbon_length, '-', _content)+'//\n'
php_credits += '//'+ribbonize(ribbon_length, '-')+'//\n'
_content = 'Written by feinz(feineirz@live.com)'
php_credits += '//'+ribbonize(ribbon_length, '-', _content)+'//\n'
php_credits += '//'+ribbonize(ribbon_length, '=')+'//\n'

php_database_info = ''
_content = 'DATABASE INFORMATION'
php_database_info += '//'+ribbonize(ribbon_length, '#', _content)+'//\n'
php_database_info += '{DATABASE_INFO}\n'
_content = 'END DATABASE INFORMATION'
php_database_info += '//'+ribbonize(ribbon_length, '/', _content)+'//\n'

# Helper Classes
php_helper_classes = ''
_content = 'HELPER CLASSES'
php_helper_classes += '//'+ribbonize(ribbon_length, '#', _content)+'//\n'

php_helper_classes += '''
/**
 * General class to store a returned data from ListRows method.
 *
 * @param  array  $ArrayData  Array data of returned record(s).
 * @param  string  $JSONData  JSON format of returned record(s).
 * @param  {CLASSNAME}[]  $Items  Array of {CLASSNAME} objects.
 * @param  integer  $Count  Count of {CLASSNAME} objects.
 */
class {CLASSNAME}ListRows{
	public $ArrayData,$JSONData,$Items,$Count;
}//EoCls

/**
 * Structured of a returned value from methods.
 *
 * @param  integer  $Code  Return code from methods. 0 if success, other if error.
 * @param  mixed  $Value  Return value from methods.
 * @param  object  $Object  Return object from methods.
 * @param  string  $Message  Return message from methods.
 */
class {CLASSNAME}ReturnResult{
	public $Code = 0, $Value = 1, $Object = NULL, $Message = 'Successful';
}//EoCls

/**
 * Structured {CLASSNAME} fields data required for Add and Update method.
 *
 *<pre>
 * <b>Usage:</b>
 * &#9;${CLASSNAME_LOWER}_info = new {CLASSNAME}Info();
 * &#9;${CLASSNAME_LOWER}_info->{TABLE_PRIMARY_KEY} = <Value to set>;
 * &#9;${CLASSNAME_LOWER}_info->other = <Value to set>;
 * &#9;...
 *
 * &#9;${CLASSNAME_LOWER} = new {CLASSNAME}();
 * &#9;${CLASSNAME_LOWER}->Add(${CLASSNAME_LOWER}_info);
 * 
 * &nbsp;&nbsp;<b>or</b>
 * &#9;${CLASSNAME_LOWER}_info = new {CLASSNAME}Info();
 * &#9;${CLASSNAME_LOWER}_info->{TABLE_PRIMARY_KEY} = <Value to set>;
 * &#9;${CLASSNAME_LOWER}_info->other = <Value to set>;
 * &#9;...
 *
 * &#9;${CLASS_PRIMARY_KEY_LOWER} = 1;
 * &#9;${CLASSNAME_LOWER} = new {CLASSNAME}(${CLASS_PRIMARY_KEY_LOWER});
 * &#9;${CLASSNAME_LOWER}->Update(${CLASSNAME_LOWER}_info);
 *</pre>
 */
class {CLASSNAME}Info{
	public {COLUMN_ATTR_LIST};
}//EoCls\n
'''
_content = 'END HELPER CLASSES'
php_helper_classes += '//'+ribbonize(ribbon_length, '/', _content)+'//\n'

# Main Class
php_main_classes = ''
_content = 'MAIN CLASSES'
php_main_classes += '//'+ribbonize(ribbon_length, '#', _content)+'//\n\n'

php_class_header = ''
phpdoc = '''
/**
 * Class for managing data from datatable '{SCHEMA_NAME}.{TABLE_NAME}'.
 *<pre>
 * <b>Usage:</b>
 * &#9;${CLASSNAME_LOWER} = new {CLASSNAME}();
 *
 * &nbsp;&nbsp;<b>or</b>
 * &#9;${CLASS_PRIMARY_KEY_LOWER} = 1;
 * &#9;${CLASSNAME_LOWER} = new {CLASSNAME}(${CLASS_PRIMARY_KEY_LOWER});
 *</pre>
 */'''
php_class_header += phpdoc
php_class_header += 'class {CLASSNAME}{\n'
php_class_header += tab()+'public {COLUMN_ATTR_LIST};\n\n'
php_main_classes += php_class_header

# Constructor
phpdoc = '''
	/**
	 * Class for managing data from datatable '{SCHEMA_NAME}.{TABLE_NAME}'.
	 *
	 *<pre>
	 * <b>Usage:</b>
	 * &#9;${CLASSNAME_LOWER} = new {CLASSNAME}();
	 *
	 * &nbsp;&nbsp;<b>or</b>
	 * &#9;${CLASS_PRIMARY_KEY_LOWER} = 1;
	 * &#9;${CLASSNAME_LOWER} = new {CLASSNAME}(${CLASS_PRIMARY_KEY_LOWER});
	 *</pre>
	 *
	 * @param  mixed  ${CLASS_PRIMARY_KEY}  Primary key use as an identifier on a database,
	 * usually integer (value 0 if auto increment).
	 * @return {CLASSNAME}  {CLASSNAME} object returned from a database.
	 */'''
_content = 'CONSTRUCTOR'
php_class_constructor = tab()+'//'+ribbonize(ribbon_length, '+', _content, 1)+'//\n'
php_class_constructor += phpdoc
php_class_constructor += '''
	function __construct(${CLASS_PRIMARY_KEY} = NULL) {
		if (!is_null(${CLASS_PRIMARY_KEY})) {
			include "dbcfg_{SCHEMA_NAME}.php";

			// Prepared Statement
			$sql = "SELECT *".
				" FROM {TABLE_NAME}".
				" WHERE {TABLE_PRIMARY_KEY} = ?";

			$stmt = $dbconn->prepare($sql);
			$stmt->bind_param("s", ${CLASS_PRIMARY_KEY});
			$stmt->execute();
			$result = $stmt->get_result();

			while ($row = $result->fetch_object()) {
{CONSTRUCTOR_ATTR_LIST}
			}
			$stmt->close();

		}
	}//EoFnc

'''

_content = 'END CONSTRUCTOR'
php_class_constructor += tab()+'//'+ribbonize(ribbon_length, '-', _content, 1)+'//\n\n'
php_main_classes += php_class_constructor

# Array & JSON
phpdoc = '''
	/**
	 * Convert {CLASSNAME} info to an array data.
	 *
	 *<pre>
	 * <b>Usage</b>:
	 * &#9;${CLASS_PRIMARY_KEY_LOWER} = 1;
	 * &#9;${CLASSNAME_LOWER} = new {CLASSNAME}(${CLASS_PRIMARY_KEY_LOWER});
	 * &#9;${CLASSNAME_LOWER}_arr = ${CLASSNAME_LOWER}->AsArray();
	 *</pre>
	 * @return  array  Array of {CLASSNAME} data.
	 */'''
_content = 'ARRAY & JSON'
php_class_as_array = tab()+'//'+ribbonize(ribbon_length, '+', _content, 1)+'//\n'
php_class_as_array += phpdoc
php_class_as_array += '''
	function AsArray() {
		$arr = array(
{ARRAY_JSON_ATTR_LIST}
		);
		return $arr;
	}//EoFnc
'''

phpdoc = '''
	/**
	 * Convert {CLASSNAME} info to JSON data format.
	 *
	 *<pre>
	 * <b>Usage</b>:
	 * &#9;${CLASS_PRIMARY_KEY_LOWER} = 1;
	 * &#9;${CLASSNAME_LOWER} = new {CLASSNAME}(${CLASS_PRIMARY_KEY_LOWER});
	 * &#9;${CLASSNAME_LOWER}_json = ${CLASSNAME_LOWER}->AsJSON();
	 *</pre>
	 * @return  string  String of {CLASSNAME} data in JSON format.
	 */'''
php_class_as_json = ''
php_class_as_json += phpdoc
php_class_as_json += '''
	function AsJSON() {
		return json_encode($this->AsArray());
	}//EoFnc

'''

_content = 'END ARRAY & JSON'
php_class_as_array += tab()+'//'+ribbonize(ribbon_length, '-', _content, 1)+'//\n\n'
php_main_classes += php_class_as_array
php_main_classes += php_class_as_json

# Properties
_content = 'PROPERTIES'
php_class_properties = tab()+'//'+ribbonize(ribbon_length, '+', _content, 1)+'//\n'
php_class_properties += '{CLASS_PROPERTIES}\n'
_content = 'END PROPERTIES'
php_class_properties += tab()+'//'+ribbonize(ribbon_length, '-', _content, 1)+'//\n\n'
php_main_classes += php_class_properties

# ListRows
phpdoc = '''
	/**
	 * List all records matches a given condition.
	 *
	 *<pre>
	 * <b>Usage:</b>
	 * &#9;${CLASSNAME_LOWER} = new {CLASSNAME}();
	 * &#9;${CLASSNAME_LOWER}_rtrs = ${CLASSNAME_LOWER}->ListRows();
	 * &#9;if (${CLASSNAME_LOWER}_rtrs->Code == 0) { // Successful //
	 * &#9;&#9;${CLASSNAME_LOWER}_listrows = ${CLASSNAME_LOWER}_rtrs->Object;
	 * &#9;&#9;foreach (${CLASSNAME_LOWER}_listrows->Items as $item) {
	 * &#9;&#9;&#9;...
	 * &#9;&#9;}
	 * &#9;} else { //--- Failed ---//
	 * &#9;&#9;...
	 * &#9;}

	 *
	 * &nbsp;&nbsp;<b>or:</b>
	 * &#9;${CLASSNAME_LOWER} = new {CLASSNAME}();
	 * &#9;$condition = "name LIKE '%php%'";
	 * &#9;${CLASSNAME_LOWER}_rtrs = ${CLASSNAME_LOWER}->ListRows($condition);
	 * &#9;if (${CLASSNAME_LOWER}_rtrs->Code == 0) { // Successful //
	 * &#9;&#9;${CLASSNAME_LOWER}_listrows = ${CLASSNAME_LOWER}_rtrs->Object;
	 * &#9;&#9;foreach (${CLASSNAME_LOWER}_listrows->Items as $item) {
	 * &#9;&#9;&#9;...
	 * &#9;&#9;}
	 * &#9;} else { //--- Failed ---//
	 * &#9;&#9;...
	 * &#9;}

	 *
	 * &nbsp;&nbsp;<b>or:</b>
	 * &#9;${CLASSNAME_LOWER} = new {CLASSNAME}();
	 * &#9;$condition = "name LIKE '%php%'";
	 * &#9;$sort_order = "name DESC";
	 * &#9;${CLASSNAME_LOWER}_rtrs = ${CLASSNAME_LOWER}->ListRows($condition, $sort_order);
	 * &#9;if (${CLASSNAME_LOWER}_rtrs->Code == 0) { // Successful //
	 * &#9;&#9;${CLASSNAME_LOWER}_listrows = ${CLASSNAME_LOWER}_rtrs->Object;
	 * &#9;&#9;foreach (${CLASSNAME_LOWER}_listrows->Items as $item) {
	 * &#9;&#9;&#9;...
	 * &#9;&#9;}
	 * &#9;} else { //--- Failed ---//
	 * &#9;&#9;...
	 * &#9;}

	 *
	 *</pre>
	 *
	 * @param  string  $Condition  Query condition to filters a returned records.<br/>
	 * (A string after 'WHERE' in SQL language.)<br/>default = '{TABLE_PRIMARY_KEY}'
	 * @param  string  $SortOrder  Datacolumn name to use as a sorting order.<br/>
	 * (A string after 'ORDER BY' in SQL language.)
	 * @param  interger  $StartIndex  (optional) Start index of returned records matches a given condition.
	 * @param  interger  $Limit  (optional) Limit number of record to returns.
	 *
	 * @return  {CLASSNAME}ReturnResult  Return as a {CLASSNAME}ReturnResult object.<br/>
	 *<pre>
	 * {CLASSNAME}ReturnResult->Code: 0 if success.
	 * {CLASSNAME}ReturnResult->Value: 0 if error or not found.
	 * {CLASSNAME}ReturnResult->Object: {CLASSNAME}ListRows object.
	 * {CLASSNAME}ReturnResult->Message: Method returned message.
	 *</pre>
	 *
	 */'''
_content = 'LISTROWS'
php_class_listrows = tab()+'//'+ribbonize(ribbon_length, '+', _content, 1)+'//\n'
php_class_listrows += phpdoc
php_class_listrows += '''
	function ListRows($Condition = '', $SortOrder = 'id', $StartIndex = 0, $Limit = 0) {
		$rtrs = new {CLASSNAME}ReturnResult();
		include "dbcfg_{SCHEMA_NAME}.php";

		$LimitOption = '';
		if (!empty($Condition)) {$Condition = ' WHERE '.$Condition;}
		if (!empty($SortOrder)) {$SortOrder = ' ORDER BY '.$SortOrder;}
		if ($StartIndex >= 0 & $Limit > 0) {$LimitOption = ' LIMIT '.$StartIndex.','.$Limit;}

		// Prepared Statment
		$sql = "SELECT *".
			" FROM {TABLE_NAME}".
			" ".$Condition.$SortOrder.$LimitOption;

		$stmt = $dbconn->prepare($sql);
		$stmt->execute();
		$result = $stmt->get_result();
		if (!$result) {
			$rtrs->Code = 3;
			$rtrs->Value = 0;
			$rtrs->Message = 'Error:['.$stmt->errno.'] '.$stmt->error;
			$stmt->close();
			return $rtrs;
		}

		$count = 0;
		$arr_list = [];
		while ($row = $result->fetch_object()) {
			$obj = new {CLASSNAME}($row->{TABLE_PRIMARY_KEY});
			array_push($arr_list, $obj->AsArray());
			$items[$count] = $obj;
			$count++;
		}

		$stmt->close();

		$list_row = new {CLASSNAME}ListRows();
		$list_row->ArrayData = $arr_list;
		$list_row->JSONData = json_encode($arr_list);
		$list_row->Items = $items;
		$list_row->Count = $count;
		$rtrs->Object = $list_row;

		return $rtrs;

	}//EoFnc

'''
_content = 'END LISTROWS'
php_class_listrows += tab()+'//'+ribbonize(ribbon_length, '-', _content, 1)+'//\n\n'
php_main_classes += php_class_listrows

# Add
phpdoc = '''
	/**
	 * Add new record to '{SCHEMA_NAME}.{TABLE_NAME}' by giving {CLASSNAME}Info object.
	 *
	 *<pre>
	 * <b>Usage:</b>
	 * &#9;${CLASSNAME_LOWER}_info = new {CLASSNAME}Info();
	 * &#9;${CLASSNAME_LOWER}_info->{TABLE_PRIMARY_KEY} = <Value to set>;
	 * &#9;${CLASSNAME_LOWER}_info->other = <Value to set>;
	 * &#9;...
	 *
	 * &#9;${CLASSNAME_LOWER} = new {CLASSNAME}();
	 * &#9;${CLASSNAME_LOWER}_rtrs = ${CLASSNAME_LOWER}->Add(${CLASSNAME_LOWER}_info);
	 * &#9;if (${CLASSNAME_LOWER}_rtrs->Code == 0) { // Successful //
	 * &#9;&#9;...
	 * &#9;} else { //--- Failed ---//
	 * &#9;&#9;...
	 * &#9;}
	 *</pre>
	 *
	 * @param  {CLASSNAME}Info  ${CLASSNAME}Info  {CLASSNAME}Info object stored {CLASSNAME} data.
	 *
	 * @return  {CLASSNAME}ReturnResult  Return as a {CLASSNAME}ReturnResult object.<br/>
	 *<pre>
	 * {CLASSNAME}ReturnResult->Code: 0 if success.
	 * {CLASSNAME}ReturnResult->Value: 0 if error or not found.
	 * {CLASSNAME}ReturnResult->Object: Added {CLASSNAME} object.
	 * {CLASSNAME}ReturnResult->Message: Method returned message.
	 *</pre>
	 *
	 */'''
_content = 'ADD'
php_class_add = tab()+'//'+ribbonize(ribbon_length, '+', _content, 1)+'//\n'
php_class_add += phpdoc
php_class_add += '''
	function Add(${CLASSNAME}Info = NULL) {
		$rtrs = new {CLASSNAME}ReturnResult();
		if (!is_null(${CLASSNAME}Info)) {
			include "dbcfg_{SCHEMA_NAME}.php";

			$sql = "INSERT INTO {TABLE_NAME} (
{ADD_ATTR_LIST}
				) VALUES (
{ADD_PLACEHOLDER}
				)";

			$stmt = $dbconn->prepare($sql);
			$stmt->bind_param("{ADD_BIND_COUNT}", 
{ADD_BIND_PARAMS}
			);
			$stmt->execute();
			if ($stmt->errno > 0) {
				$rtrs->Code = 3;
				$rtrs->Value = 0;
				$rtrs->Message = 'Error:['.$stmt->errno.'] '.$stmt->error;
				$stmt->close();
				return $rtrs;
			}

			$id = $stmt->insert_id;
			$afr = $stmt->affected_rows;
			$stmt->close();

			if ($id) {
				$rtrs->Value = $id;
				$rtrs->Object = new {CLASSNAME}($id);
			} else {
				$rtrs->Code = 1;
				$rtrs->Value = 0;
				$rtrs->Message = "Error: Add data from {CLASSNAME}Info failed!";
				return $rtrs;
			}
			return $rtrs;

		} else {
			$rtrs->Code = 2;
			$rtrs->Value = 0;
			$rtrs->Message = "Error: {CLASSNAME}Info cannot be NULL!";
			return $rtrs;
		}

	}//EoFnc
'''

phpdoc = '''
	/**
	 * Add new record to '{SCHEMA_NAME}.{TABLE_NAME}' from {CLASSNAME} POST data.
	 * Use with caution, HTML input name MUST BE matches all column name in a database
	 * and contains all field to add to the database.
	 *
	 *<pre>
	 * <b>Usage:</b>
	 * &#9;${CLASSNAME_LOWER} = new {CLASSNAME}();
	 * &#9;$postdata = $_POST;
	 * &#9;${CLASSNAME_LOWER}_rtrs = ${CLASSNAME_LOWER}->AddFromPOST($postdata);
	 * &#9;if (${CLASSNAME_LOWER}_rtrs->Code == 0) { // Successful //
	 * &#9;&#9;...
	 * &#9;} else { //--- Failed ---//
	 * &#9;&#9;...
	 * &#9;}
	 *</pre>
	 *
	 * @param  mixed  $post_data  POST data form HTML form.
	 *
	 * @return  {CLASSNAME}ReturnResult  Return as a {CLASSNAME}ReturnResult object.<br/>
	 *<pre>
	 * {CLASSNAME}ReturnResult->Code: 0 if success.
	 * {CLASSNAME}ReturnResult->Value: 0 if error or not found.
	 * {CLASSNAME}ReturnResult->Object: Added {CLASSNAME} object.
	 * {CLASSNAME}ReturnResult->Message: Method returned message.
	 *</pre>
	 *
	 */'''
php_class_addfrompost = ''
php_class_addfrompost += phpdoc
php_class_addfrompost += '''
	function AddFromPOST($post_data = NULL) {
		if (!is_null($post_data)) {
			${TABLE_NAME}_info = new {CLASSNAME}Info();
			$rtrs = new {CLASSNAME}ReturnResult();
{ADDFROMPOST_ATTR_CHECKLIST}
			return $this->Add(${TABLE_NAME}_info);
		}
	}//EoFnc

'''

_content = 'END ADD'
php_class_add += tab()+'//'+ribbonize(ribbon_length, '-', _content, 1)+'//\n\n'
php_main_classes += php_class_add
php_main_classes += php_class_addfrompost

# Update
phpdoc = '''
	/**
	 * Add new record to '{SCHEMA_NAME}.{TABLE_NAME}' by giving {CLASSNAME}Info object.
	 *
	 *<pre>
	 * <b>Usage:</b>
	 * &#9;${CLASSNAME_LOWER}_info = new {CLASSNAME}Info();
	 * &#9;${CLASSNAME_LOWER}_info->{TABLE_PRIMARY_KEY} = <Value to set>;
	 * &#9;${CLASSNAME_LOWER}_info->other = <Value to set>;
	 * &#9;...
	 *
	 * &#9;${CLASS_PRIMARY_KEY_LOWER} = 1;
	 * &#9;${CLASSNAME_LOWER} = new {CLASSNAME}(${CLASS_PRIMARY_KEY_LOWER});
	 * &#9;${CLASSNAME_LOWER}_rtrs = ${CLASSNAME_LOWER}->Update(${CLASSNAME_LOWER}_info);
	 * &#9;if (${CLASSNAME_LOWER}_rtrs->Code == 0) { // Successful //
	 * &#9;&#9;...
	 * &#9;} else { //--- Failed ---//
	 * &#9;&#9;...
	 * &#9;}
	 *</pre>
	 *
	 * @param  {CLASSNAME}Info  ${CLASSNAME}Info  {CLASSNAME}Infoobject stored {CLASSNAME} data.
	 *
	 * @return  {CLASSNAME}ReturnResult  Return as a {CLASSNAME}ReturnResult object.<br/>
	 *<pre>
	 * {CLASSNAME}ReturnResult->Code: 0 if success.
	 * {CLASSNAME}ReturnResult->Value: 0 if error or not found.
	 * {CLASSNAME}ReturnResult->Object: Updated {CLASSNAME} object.
	 * {CLASSNAME}ReturnResult->Message: Method returned message.
	 *</pre>
	 *
	 */'''
_content = 'UPDATE'
php_class_update = tab()+'//'+ribbonize(ribbon_length, '+', _content, 1)+'//\n'
php_class_update += phpdoc
php_class_update += '''
	function Update(${CLASSNAME}Info = NULL) {
		$rtrs = new {CLASSNAME}ReturnResult();
		if (!is_null(${CLASSNAME}Info)) {
			include "dbcfg_{SCHEMA_NAME}.php";

			$sql = "UPDATE {TABLE_NAME} SET".
{UPDATE_ATTR_NOPRIMARY_LIST}
				" WHERE {TABLE_PRIMARY_KEY} = ?";

			$stmt = $dbconn->prepare($sql);
			$stmt->bind_param("{UPDATE_BIND_COUNT}",
{UPDATE_BIND_PARAMS}
				${CLASSNAME}Info->{TABLE_PRIMARY_KEY}
			);
			$stmt->execute();
			$result = $stmt->get_result();
			if ($stmt->errno > 0) {
				$rtrs->Code = 3;
				$rtrs->Value = 0;
				$rtrs->Message = 'Error:['.$stmt->errno.'] '.$stmt->error;
				$stmt->close();

				return $rtrs;
			}

			$rtrs->Value = $stmt->affected_rows;
			$rtrs->Object = new {CLASSNAME}(${CLASSNAME}Info->{TABLE_PRIMARY_KEY});
			$stmt->close();

			return $rtrs;

		}
	}//EoFnc

'''

_content = 'END UPDATE'
php_class_update += tab()+'//'+ribbonize(ribbon_length, '-', _content, 1)+'//\n\n'
php_main_classes += php_class_update

# Delete
phpdoc = '''
	/**
	 * Delete record from '{SCHEMA_NAME}.{TABLE_NAME}' by giving a '{CLASS_PRIMARY_KEY}' 
	 * or delete itself if '{CLASS_PRIMARY_KEY}' not specify.
	 *
	 *<pre>
	 * <b>Usage:</b>
	 * &#9;${CLASS_PRIMARY_KEY_LOWER} = 1;
	 * &#9;${CLASSNAME_LOWER} = new {CLASSNAME}(${CLASS_PRIMARY_KEY_LOWER});
	 * &#9;${CLASSNAME_LOWER}_rtrs = ${CLASSNAME_LOWER}->Delete();
	 * &#9;if (${CLASSNAME_LOWER}_rtrs->Code == 0) { // Successful //
	 * &#9;&#9;...
	 * &#9;} else { //--- Failed ---//
	 * &#9;&#9;...
	 * &#9;}
	 *
	 * &nbsp;&nbsp;<b>or</b>
	 * &#9;${CLASS_PRIMARY_KEY_LOWER} = 1;
	 * &#9;${CLASSNAME_LOWER} = new {CLASSNAME}();
	 * &#9;${CLASSNAME_LOWER}_rtrs = ${CLASSNAME_LOWER}->Delete(${CLASS_PRIMARY_KEY_LOWER});
	 * &#9;if (${CLASSNAME_LOWER}_rtrs->Code == 0) { // Successful //
	 * &#9;&#9;...
	 * &#9;} else { //--- Failed ---//
	 * &#9;&#9;...
	 * &#9;}
	 *</pre>
	 *
	 * @param  mixed  ${CLASS_PRIMARY_KEY} (optional)  Primary key to delete.
	 *
	 * @return  {CLASSNAME}ReturnResult  Return as a {CLASSNAME}ReturnResult object.<br/>
	 *<pre>
	 * {CLASSNAME}ReturnResult->Code: 0 if success.
	 * {CLASSNAME}ReturnResult->Value: 0 if error or not found.
	 * {CLASSNAME}ReturnResult->Object: NULL.
	 * {CLASSNAME}ReturnResult->Message: Method returned message.
	 *</pre>
	 *
	 */'''
_content = 'DELETE'
php_class_delete = tab()+'//'+ribbonize(ribbon_length, '+', _content, 1)+'//\n'
php_class_delete += phpdoc
php_class_delete += '''
	function Delete(${CLASS_PRIMARY_KEY} = NULL) {
		$rtrs = new {CLASSNAME}ReturnResult();
		if (!is_null(${CLASS_PRIMARY_KEY})) {
			$id_to_delete = ${CLASS_PRIMARY_KEY};
		} else {
			$id_to_delete = $this->{TABLE_PRIMARY_KEY};
		}
		include "dbcfg_{SCHEMA_NAME}.php";

		$sql = "DELETE FROM {TABLE_NAME}".
			" WHERE {TABLE_PRIMARY_KEY} = ?";	

		$stmt = $dbconn->prepare($sql);
		$stmt->bind_param("s", $id_to_delete);
		$stmt->execute();

		if ($stmt->errno > 0) {
			$rtrs->Code = 3;
			$rtrs->Value = 0;
			$rtrs->Message = 'Error:['.$stmt->errno.'] '.$stmt->error;
			$stmt->close();

			return $rtrs;
		}

		$rtrs->Value = $stmt->affected_rows;
		$stmt->close();

		return $rtrs;

	}//EoFnc
	
'''
_content = 'END DELETE'
php_class_delete += tab()+'//'+ribbonize(ribbon_length, '-', _content, 1)+'//\n\n'
php_main_classes += php_class_delete

# Exists
phpdoc = '''
	/**
	 * Check if record matches a given condition exists.
	 *
	 *<pre>
	 * <b>Usage:</b>
	 * &#9;${CLASSNAME_LOWER} = new {CLASSNAME}();
	 * &#9;${CLASSNAME_LOWER}_rtrs = ${CLASSNAME_LOWER}->Exist();
	 * &#9;$is_exist = ${CLASSNAME_LOWER}_rtrs->Value;
	 * &#9;if (${CLASSNAME_LOWER}_rtrs->Code == 0) { // Successful // or Exists
	 * &#9;&#9;...
	 * &#9;} else { //--- Failed ---// or Not exists
	 * &#9;&#9;...
	 * &#9;}
	 *</pre>
	 *
	 * @param  string  $Condition  Condition to filter record(s) from a database.
	 *
	 * @return  {CLASSNAME}ReturnResult  Return as a {CLASSNAME}ReturnResult object.<br/>
	 *<pre>
	 * {CLASSNAME}ReturnResult->Code: 0 if success.
	 * {CLASSNAME}ReturnResult->Value: 0 if error or not found.
	 * {CLASSNAME}ReturnResult->Object: First {CLASSNAME} object matches a given condition.
	 * {CLASSNAME}ReturnResult->Message: Method returned message.
	 *</pre>
	 *
	 */'''
_content = 'EXISTS'
php_class_exists = tab()+'//'+ribbonize(ribbon_length, '+', _content, 1)+'//\n'
php_class_exists += phpdoc
php_class_exists += '''
	function Exists($Condition = NULL) {
		$rtrs = new {CLASSNAME}ReturnResult();

		if (!is_null($Condition)) {
			include "dbcfg_{SCHEMA_NAME}.php";

			$sql = "SELECT * ".
				" FROM {TABLE_NAME}".
				" WHERE ".$Condition;
			
			$stmt = $dbconn->prepare($sql);
			$stmt->execute();
			$result = $stmt->get_result();
			if (!$result) {
				$rtrs->Code = 3;
				$rtrs->Value = 0;
				$rtrs->Message = 'Error:['.$stmt->errno.'] '.$stmt->error;
				$stmt->close();
				return $rtrs;
			}

			while ($row = $result->fetch_object()) {
				$obj = new {CLASSNAME}($row->{TABLE_PRIMARY_KEY});
				$rtrs->Object = $obj;
				$stmt->close();
				return $rtrs;
			}

			$stmt->close();

			$rtrs->Code = 2;
            $rtrs->Value = 0;
            $rtrs->Message = 'Result not found.';
            return $rtrs;

		}
	}//EoFnc

'''
_content = 'END EXISTS'
php_class_exists += tab()+'//'+ribbonize(ribbon_length, '-', _content, 1)+'//\n\n'
php_main_classes += php_class_exists

# Count
phpdoc = '''
	/**
	 * Count the record matches a given condition.
	 *
	 *<pre>
	 * <b>Usage:</b>
	 * &#9;${CLASSNAME_LOWER} = new {CLASSNAME}();
	 * &#9;$condition = "name LIKE '%php%'";
	 * &#9;${CLASSNAME_LOWER}_rtrs = ${CLASSNAME_LOWER}->Count($condition);
	 * &#9;$count = ${CLASSNAME_LOWER}_rtrs->Value;
	 * &#9;...
	 *</pre>
	 *
	 * @param  string  $Condition  Condition to filter record(s) from a database.
	 *
	 * @return  {CLASSNAME}ReturnResult  Return as a {CLASSNAME}ReturnResult object.<br/>
	 *<pre>
	 * {CLASSNAME}ReturnResult->Code: 0 if success.
	 * {CLASSNAME}ReturnResult->Value: Number of record(s) matches a given condition.
	 * {CLASSNAME}ReturnResult->Object: NULL
	 * {CLASSNAME}ReturnResult->Message: Method returned message.
	 *</pre>
	 */'''
_content = 'COUNT'
php_class_count = tab()+'//'+ribbonize(ribbon_length, '+', _content, 1)+'//\n'
php_class_count += phpdoc
php_class_count += '''
	function Count($Condition = NULL) {
		$rtrs = new {CLASSNAME}ReturnResult();

		if (!empty($Condition)) {$Condition = ' WHERE '.$Condition;}
		include "dbcfg_{SCHEMA_NAME}.php";

		$sql = "SELECT COUNT(*) AS recCount".
			" FROM {TABLE_NAME}".$Condition;

		if (!$result = $dbconn->query($sql)) {
			$rtrs->Code = 3;
			$rtrs->Value = 0;
			$rtrs->Message = 'Error:['.$stmt->errno.'] '.$stmt->error;
			return $rtrs;

		}
		while ($row = $result->fetch_object()) {
			$rtrs->Value = $row->recCount;
			return $rtrs;
		}

		$rtrs->Value = 0;
		$rtrs->Message = 'Result not found.';
		return $rtrs;


	}//EoFnc

'''
_content = 'END COUNT'
php_class_count += tab()+'//'+ribbonize(ribbon_length, '-', _content, 1)+'//\n\n'
php_main_classes += php_class_count

# Shorten
phpdoc = '''
	/**
	 * Shorten a long string to specified length. if multiple lines, only the first line return.
	 *
	 *<pre>
	 * <b>Usage:</b>
	 * &#9;${CLASSNAME_LOWER} = new {CLASSNAME}();
	 * &#9;$content = <Long text>;
	 * &#9;$content = ${CLASSNAME_LOWER}->Shorten($content);
	 * &#9;...
	 *</pre>
	 *
	 * @param  string  $Content  A long string to be shorten.
	 * @param  integer  $Length  (optional) Length of the return string.
	 *
	 * @return  string  A shorten specific length string.
	 */'''
_content = 'SHORTEN'
php_class_shorten = tab()+'//'+ribbonize(ribbon_length, '+', _content, 1)+'//\n'
php_class_shorten += phpdoc
php_class_shorten += '''
	function Shorten($Content, $Length = 24) {
		$suffix = '';
		if (strlen($Content) > $Length) $suffix = '...';
		
		$Content = preg_split('#\\r?\\n#', ltrim($Content), 0)[0];
		$buff = substr($Content, 0, $Length).$suffix;

		return $buff;

	}//EoFnc

'''
_content = 'END SHORTEN'
php_class_shorten += tab()+'//'+ribbonize(ribbon_length, '-', _content, 1)+'//\n\n'
php_main_classes += php_class_shorten


# Login
phpdoc = '''
	/**
	 * Login to the system by giving {WITHLOGIN_USER_COLUMNNAME} and {WITHLOGIN_PASSWORD_COLUMNNAME}.<br/>
	 * ***The {WITHLOGIN_PASSWORD_COLUMNNAME} column in a database MUST BE encrypted by PASSWORD() function.
	 *
	 *<pre>
	 * <b>Usage:</b>
	 * &#9;${CLASSNAME_LOWER} = new {CLASSNAME}();
	 * &#9;${WITHLOGIN_USER_COLUMNNAME_LOWER} = 'username';
	 * &#9;${WITHLOGIN_PASSWORD_COLUMNNAME_LOWER} = 'password';
	 * &#9;${CLASSNAME_LOWER}_rtrs = ${CLASSNAME_LOWER}->Login(${WITHLOGIN_USER_COLUMNNAME_LOWER}, ${WITHLOGIN_PASSWORD_COLUMNNAME_LOWER});
	 * &#9;if (${CLASSNAME_LOWER}_rtrs->Code == 0) { //--- Successful ---//
	 * &#9;&#9;...
	 * &#9;} else { //--- Failed ---//
	 * &#9;&#9;...
	 * &#9;}
	 *</pre>
	 *
	 * @param  string  ${WITHLOGIN_USER_COLUMNNAME_LOWER}  {WITHLOGIN_USER_COLUMNNAME} to login to the system.
	 * @param  string  ${WITHLOGIN_PASSWORD_COLUMNNAME_LOWER}  {WITHLOGIN_PASSWORD_COLUMNNAME} to login to the system.
	 *
	 * @return  {CLASSNAME}ReturnResult  Return as a {CLASSNAME}ReturnResult object.<br/>
	 *<pre>
	 * {CLASSNAME}ReturnResult->Code: 0 if success.
	 * {CLASSNAME}ReturnResult->Value: 0 if Error or Not found.
	 * {CLASSNAME}ReturnResult->Object: {CLASSNAME} object matches the given {WITHLOGIN_USER_COLUMNNAME} and {WITHLOGIN_PASSWORD_COLUMNNAME}. 
	 * {CLASSNAME}ReturnResult->Message: Method returned message.
	 *</pre>
	 */'''
_content = 'LOGIN'
php_class_login = tab()+'//'+ribbonize(ribbon_length, '+', _content, 1)+'//\n'
php_class_login += phpdoc
php_class_login += '''
	function Login(${WITHLOGIN_USER_COLUMNNAME}, ${WITHLOGIN_PASSWORD_COLUMNNAME}) {
		$rtrs = new {CLASSNAME}ReturnResult();
		if (${WITHLOGIN_USER_COLUMNNAME} && ${WITHLOGIN_PASSWORD_COLUMNNAME}) {
			include "dbcfg_{SCHEMA_NAME}.php";

			$sql = "SELECT * ".
				" FROM {TABLE_NAME}".
				" WHERE {WITHLOGIN_USER_COLUMNNAME} = ?".
				" AND {WITHLOGIN_PASSWORD_COLUMNNAME} = PASSWORD(?)";
			$stmt = $dbconn->prepare($sql);
			$stmt->bind_param("ss", ${WITHLOGIN_USER_COLUMNNAME}, ${WITHLOGIN_PASSWORD_COLUMNNAME});
			$stmt->execute();
			if (!$result = $stmt->get_result()) {
				$rtrs->Code = 3;
				$rtrs->Value = 0;
				$rtrs->Message = 'Error:['.$stmt->errno.'] '.$stmt->error;
				return $rtrs;
			}
            
			while ($row = $result->fetch_object()) {
				$rtrs->Object = new {CLASSNAME}($row->{TABLE_PRIMARY_KEY});
                $stmt->close();
                return $rtrs;
			}

			$stmt->close();

			$rtrs->Code = 2;
            $rtrs->Value = 0;
            $rtrs->Message = 'Result not found.';
            return $rtrs;

		} else {
            $rtrs->Code = 1;
            $rtrs->Value = 0;
            $rtrs->Message = 'Invalid parameter.';
            return $rtrs;
            
        }
	}//EoFnc

'''

_content = 'END LOGIN'
php_class_login += tab()+'//'+ribbonize(ribbon_length, '-', _content, 1)+'//\n\n'

php_main_classes += '{CLASS_WITHLOGIN_CONTENT}\n'
php_main_classes += '}\n\n'
_content = 'END MAIN CLASSES'
php_main_classes += '//'+ribbonize(ribbon_length, '/', _content)+'//\n'